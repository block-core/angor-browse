@page "/browse"

<PageTitle>Browse</PageTitle>

@* <div class="flex flex-col w-full gap-12 md:gap-2 overflow-hidden">

    <div class="flex flex-wrap w-full flex-col gap-8 md:p-10 bg-surface-100 dark:bg-surfacedark-100 rounded-2xl">
        <div class="flex flex-col gap-2">
            <h2 class="text-xl leading-tight">Browse</h2>
            <div class="bg-neutral-10 dark:bg-neutral-900 p-6 md:p-8 border border-gray-200 dark:border-gray-700 rounded-2xl">
                <div class="flex flex-col md:flex-row md:flex-wrap gap-4 md:gap-8">

                    <div>
                        <p class="text-sm tracking-[0.1px] mb-3">
                            Please wait...
                        </p>
                        <div class="w-full md:w-72 p-10 bg-neutral-10 dark:bg-neutral-900 rounded-2xl border border-gray-200 dark:border-gray-700">
                            <div class="relative flex flex-col gap-4 text-center mb-6">
                                <div class="relative">
                                    <!-- linear loader -->
                                    <div class="linear-loader relative overflow-hidden w-full h-1 flex bg-gray-100 dark:bg-gray-700">
                                        <!-- slow -->
                                        <div class="bar absolute inset-0 w-full bg-primary-600 dark:bg-primary-200"></div>
                                        <!-- fast -->
                                        <div class="bar absolute inset-0 w-full bg-primary-600 dark:bg-primary-200"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="relative flex flex-col items-center justify-center">
                                <!-- circular loader -->
                                <svg class="circular-loader relative w-[100px] h-[100px]">
                                    <circle class="path stroke-primary-600 dark:stroke-primary-200" cx="50" cy="50" r="20" fill="none"
                                            stroke-width="5" stroke-miterlimit="10"></circle>
                                </svg>
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
    </div>

</div>
 *@

@using Angor.Browse.Components
@using Angor.Browse.Shared.Services
@using Angor.Browse.Shared.Models
@using Nostr.Client.Keys
@inject ICacheStorage SessionStorage;
@inject NavigationManager NavigationManager
@inject IRelayService _RelayService
@inject IIndexerService _IndexerService

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Browse Projects</h3>

            <NotificationComponent @ref="notificationComponent" />

            <!-- Search form -->
            <form @onsubmit="SearchProjects">
                <div class="mb-3">
                    <label for="searchQuery" class="form-label">Search</label>
                    <input type="text" id="searchQuery" @bind="searchQuery" class="form-control" placeholder="Enter search query" />
                </div>
                <button type="submit" class="btn btn-primary" disabled="@searchInProgress">Search</button>
                <br /> <br />
            </form>

            <!-- List of projects -->
            @if (projects.Count == 0)
            {
                @if (searchInProgress)
                {
                    <div class="loader"></div>
                }
                else
                {
                    <p>No projects found.</p>
                }
            }
            else
            {
                foreach (var project in projects.OrderByDescending(project => project.CreatedOnBlock))
                {
                    @if (SessionStorage.IsProjectInStorageById(project.ProjectIdentifier)) //TODO should we show that projects exist but the user needs to add the right relay?
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">@project.ProjectIdentifier</h5>
                                <p class="card-text">Nostr ID: <a href="/" target="_blank">@(NostrPublicKey.FromHex(project.NostrPubKey).Bech32)</a></p>
                                @if (searchInProgress)
                                {
                                    <div class="loader"></div>
                                }
                                else
                                {
                                    <button @onclick="() => ViewProjectDetails(project.ProjectIdentifier)" class="btn btn-primary">View</button>
                                }
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    NotificationComponent notificationComponent;
    private string searchQuery;
    bool searchInProgress = false;

    private List<ProjectIndexerData> projects = new();

    protected override async Task OnInitializedAsync()
    {
        projects = SessionStorage.GetProjectIndexerData() ?? new();
    }

    private async Task SearchProjects()
    {
        searchInProgress = true;

        var blockchainProjects = await _IndexerService.GetProjectsAsync();

        var projectsNotInList = blockchainProjects
            .Where(blockchainProject => projects.All(_ => _.ProjectIdentifier != blockchainProject.ProjectIdentifier))
            .ToList();

        if (projectsNotInList.Any())
        {
            projects.AddRange(projectsNotInList.ToArray());
            SessionStorage.SetProjectIndexerData(projects);

            var projectsForLookup = projectsNotInList
                .Where(_ => _.NostrPubKey != null) //For old projects in the indexer
                                                   //.Where(_ => !SessionStorage.IsProjectInStorageById(_.ProjectIdentifier))
                .Select(_ => _.NostrPubKey)
                .ToArray();

            if (projectsForLookup.Any())
                _RelayService.LookupProjectsInfoByPubKeys<ProjectInfo>(_ =>
                {
                    if (!SessionStorage.IsProjectInStorageById(_.ProjectIdentifier))
                        SessionStorage.StoreProjectInfo(_);
                },
                    OnEndOfStreamAction: StateHasChanged,
                    nostrPubKey: projectsForLookup);

            StateHasChanged();
        }

        searchInProgress = false;
    }

    private void ViewProjectDetails(string projectIdentifier)
    {
        if (SessionStorage.IsProjectInStorageById(projectIdentifier))
        {
            _RelayService.CloseConnection();
            NavigationManager.NavigateTo($"/view/{projectIdentifier}");
        }
        else
        {
            notificationComponent.ShowNotificationMessage("The project was not loaded from the relay yet");
        }
    }
}